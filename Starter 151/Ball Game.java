import java.util.*; class BallGame { static class Ball { long position; long speed; Ball(long position, long speed) { this.position = position; this.speed = speed; } } private static boolean shouldMerge(Ball a, Ball b) { return a.position * b.speed > b.position * a.speed; } private static List<Ball> readBalls(Scanner scanner, int count) { List<Ball> balls = new ArrayList<>(); for (int i = 0; i < count; i++) { long position = scanner.nextLong(); balls.add(new Ball(position, 0)); } for (int i = 0; i < count; i++) { long speed = scanner.nextLong(); balls.get(i).speed = speed; } return balls; } private static List<Ball> processBalls(List<Ball> balls) { balls.sort(Comparator.comparingLong(ball -> ball.position)); Stack<Ball> stack = new Stack<>(); for (Ball ball : balls) { while (!stack.isEmpty() && shouldMerge(stack.peek(), ball)) { stack.pop(); } stack.push(ball); } return stack; } private static void processTestCase(Scanner scanner) { int ballCount = scanner.nextInt(); List<Ball> balls = readBalls(scanner, ballCount); List<Ball> result = processBalls(balls); System.out.println(result.size()); } public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int testCases = scanner.nextInt(); while (testCases-- > 0) { processTestCase(scanner); } scanner.close(); } }
